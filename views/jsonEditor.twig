<script>
  window.addEventListener("load", () => {
    // Resize window to content size
    const innerText = document.getElementById("fieldset");
    window.resizeTo(innerText.offsetWidth * 1.25, innerText.offsetHeight * 1.5);
  });

  // Global object representing the current state of the form
  const propertyObj = {};

  function onPropertyChanged(k, v) {
    if (k !== "") {
      propertyObj[k] = v;
    }
  }

  function getPropertyElement(key, val) {
    const newRow = document.createElement("tr");

    const newKeyCol = document.createElement("td");
    const newValCol = document.createElement("td");
    const newImgCol = document.createElement("td");

    const newKey = document.createElement("input");
    const newVal = document.createElement("input");
    const newImg = document.createElement("img");

    newKey.placeholder = "Property Key";
    newKey.value = key;

    newVal.placeholder = "Property Value";
    newVal.value = val;

    if (key !== "") {
      propertyObj[key] = val;
    }

    newImg.src = "../../images/del.png";
    newImg.alt = "delete row";
    newImg.onclick = () => {
      newRow.parentNode.removeChild(newRow);
      if (Object.keys(propertyObj).includes(newKey.value)) {
        delete propertyObj[newKey.value];
      }
    };
    newImg.style.cursor = "pointer";
    newImg.style.width = "0.75em";

    newKey.onchange = () => onPropertyChanged(newKey.value, newVal.value);
    newVal.onchange = () => onPropertyChanged(newKey.value, newVal.value);

    newKeyCol.appendChild(newKey);
    newValCol.appendChild(newVal);
    newImgCol.appendChild(newImg);

    newRow.appendChild(newKeyCol);
    newRow.appendChild(newValCol);
    newRow.appendChild(newImgCol);

    return newRow;
  }

  function getEmptyPropertyElement() {
    return getPropertyElement("", "");
  }

  function addEmptyRow(newRowsId) {
    const newRowsContainer = document.getElementById(newRowsId);
    newRowsContainer.appendChild(getEmptyPropertyElement());
  }

  function submitForm() {
    const propertyObjStr = Object.keys(propertyObj).length > 0 ? JSON.stringify(propertyObj) : "";
    opener.document.fullform.{{ origFormName }}.value = propertyObjStr;
    window.close();
  }
</script>
<fieldset id="fieldset" style="width:450px;">
  <legend><b>{{ legend }}</b></legend>
  <table id="props-tbl">
    <tbody id="existing-props"></tbody>
    <tbody id="new-props"></tbody>
  </table>
  <div style="margin-top: 1em;">
    <button id="submitButton" onclick="submitForm();">
      Update properties
    </button>
    <button id="addRowButton" onclick="addEmptyRow('new-props');">
      Add row
    </button>
  </div>
</fieldset>
<script type="text/javascript">
  const origProps = opener.document.fullform.{{ origFormName }}.value;
  const existingPropsContainer = document.getElementById("existing-props");
  const newPropsContainer = document.getElementById("new-props");

  try {
    const origPropsJSON = JSON.parse(origProps);
    Object.keys(origPropsJSON).forEach((k) => {
      existingPropsContainer.appendChild(getPropertyElement(k, origPropsJSON[k]));
    });
  } catch(e) {
    if (origProps !== '') {
      existingPropsContainer.appendChild(getPropertyElement('{{ defaultPropName }}', origProps));
    }
  }
  newPropsContainer.appendChild(getEmptyPropertyElement());
</script>